/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef TELEREDDIT_H_
#define TELEREDDIT_H_

#include "..\src\sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'telereddit'.
*/

#ifndef TELEREDDIT_EVENTQUEUE_BUFFERSIZE
#define TELEREDDIT_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define TELEREDDIT_STATE_COUNT 11

/*! Define dimension of the state configuration vector for orthogonal states. */
#define TELEREDDIT_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_TELEREDDIT_R_WAITING 0
#define SCVI_TELEREDDIT_R_SEND_LINK 0
#define SCVI_TELEREDDIT_R_SEND_LINK_R_SEND_POST 0
#define SCVI_TELEREDDIT_R_SEND_LINK_R_WAIT_FOR_API_RESPONSE 0
#define SCVI_TELEREDDIT_R_SEND_SUBREDDIT 0
#define SCVI_TELEREDDIT_R_SEND_SUBREDDIT_R_SEND_POST 0
#define SCVI_TELEREDDIT_R_SEND_SUBREDDIT_R_WAIT_FOR_API_RESPONSE 0
#define SCVI_TELEREDDIT_R_DELETE_POST 0
#define SCVI_TELEREDDIT_R_EDIT_POST 0
#define SCVI_TELEREDDIT_R_EDIT_POST_R_EDIT_POST 0
#define SCVI_TELEREDDIT_R_EDIT_POST_R_WAIT_FOR_API_RESPONSE 0



/*! Enumeration of all states */ 
typedef enum
{
	Telereddit_last_state,
	Telereddit_r_waiting,
	Telereddit_r_send_link,
	Telereddit_r_send_link_r_send_post,
	Telereddit_r_send_link_r_wait_for_api_response,
	Telereddit_r_send_subreddit,
	Telereddit_r_send_subreddit_r_send_post,
	Telereddit_r_send_subreddit_r_wait_for_api_response,
	Telereddit_r_delete_post,
	Telereddit_r_edit_post,
	Telereddit_r_edit_post_r_edit_post,
	Telereddit_r_edit_post_r_wait_for_api_response
} TeleredditStates;

/*! Type definition of the data structure for the TeleredditInternal interface scope. */
typedef struct
{
	sc_string message;
} TeleredditInternal;



/*! Type definition of the data structure for the TeleredditIfaceUser interface scope. */
typedef struct
{
	sc_boolean choose_send_link_raised;
	sc_boolean choose_send_subreddit_raised;
	sc_boolean choose_more_posts_raised;
	sc_boolean choose_delete_post_raised;
	sc_boolean choose_edit_post_raised;
} TeleredditIfaceUser;



/*! Type definition of the data structure for the TeleredditIfaceApi interface scope. */
typedef struct
{
	sc_boolean response_raised;
	sc_integer status;
	sc_integer tries;
} TeleredditIfaceApi;


/* Declaration of constants for scope TeleredditIfaceApi. */
extern const sc_integer TELEREDDIT_TELEREDDITIFACEAPI_OK;
extern const sc_integer TELEREDDIT_TELEREDDITIFACEAPI_ERROR;
extern const sc_integer TELEREDDIT_TELEREDDITIFACEAPI_NONE;
extern const sc_integer TELEREDDIT_TELEREDDITIFACEAPI_MAX_TRIES;



/*! 
 * Type definition of the data structure for the Telereddit state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	TeleredditStates stateConfVector[TELEREDDIT_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	TeleredditInternal internal;
	TeleredditIfaceUser ifaceUser;
	TeleredditIfaceApi ifaceApi;
} Telereddit;



/*! Initializes the Telereddit state machine data structures. Must be called before first usage.*/
extern void telereddit_init(Telereddit* handle);

/*! Activates the state machine */
extern void telereddit_enter(Telereddit* handle);

/*! Deactivates the state machine */
extern void telereddit_exit(Telereddit* handle);

/*! Performs a 'run to completion' step. */
extern void telereddit_runCycle(Telereddit* handle);


/*! Raises the in event 'choose_send_link' that is defined in the interface scope 'user'. */ 
extern void teleredditIfaceUser_raise_choose_send_link(Telereddit* handle);

/*! Raises the in event 'choose_send_subreddit' that is defined in the interface scope 'user'. */ 
extern void teleredditIfaceUser_raise_choose_send_subreddit(Telereddit* handle);

/*! Raises the in event 'choose_more_posts' that is defined in the interface scope 'user'. */ 
extern void teleredditIfaceUser_raise_choose_more_posts(Telereddit* handle);

/*! Raises the in event 'choose_delete_post' that is defined in the interface scope 'user'. */ 
extern void teleredditIfaceUser_raise_choose_delete_post(Telereddit* handle);

/*! Raises the in event 'choose_edit_post' that is defined in the interface scope 'user'. */ 
extern void teleredditIfaceUser_raise_choose_edit_post(Telereddit* handle);

/*! Gets the value of the variable 'OK' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_oK(const Telereddit* handle);
/*! Gets the value of the variable 'ERROR' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_eRROR(const Telereddit* handle);
/*! Gets the value of the variable 'NONE' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_nONE(const Telereddit* handle);
/*! Gets the value of the variable 'MAX_TRIES' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_mAX_TRIES(const Telereddit* handle);
/*! Raises the in event 'response' that is defined in the interface scope 'api'. */ 
extern void teleredditIfaceApi_raise_response(Telereddit* handle);

/*! Gets the value of the variable 'status' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_status(const Telereddit* handle);
/*! Sets the value of the variable 'status' that is defined in the interface scope 'api'. */ 
extern void teleredditIfaceApi_set_status(Telereddit* handle, sc_integer value);
/*! Gets the value of the variable 'tries' that is defined in the interface scope 'api'. */ 
extern sc_integer teleredditIfaceApi_get_tries(const Telereddit* handle);
/*! Sets the value of the variable 'tries' that is defined in the interface scope 'api'. */ 
extern void teleredditIfaceApi_set_tries(Telereddit* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean telereddit_isActive(const Telereddit* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean telereddit_isFinal(const Telereddit* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean telereddit_isStateActive(const Telereddit* handle, TeleredditStates state);


#ifdef __cplusplus
}
#endif 

#endif /* TELEREDDIT_H_ */
